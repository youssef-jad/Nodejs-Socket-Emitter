'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Module = require('module');
var path = require('path');
var Utils = require('./index');
var Renderer = require('../renderer');
var Models = require('../models');

var Options = function Options(optsObj) {
    _classCallCheck(this, Options);

    this.vueFileRegex = /([\w/.\-@_\d]*\.vue)/igm;
    this.requireRegex = /(require\(['"])([\w/.\-@_\d]*\.vue)(['"]\))/igm;
    this.appendPaths = optsObj.appendPaths || [];
    this.prependPaths = optsObj.prependPaths || [];
    this.rootPath = optsObj.rootPath || '';
    this.defaults = optsObj.defaults;
};

function getVueObject(componentPath, rootPath, vueComponentFileMatch, Cache, Options) {
    var GlobalOptions = new Models.Defaults({
        rootPath: rootPath,
        component: componentPath,
        style: Options.defaults.style || ''
    });
    return new Promise(function (resolve, reject) {
        Utils.setupComponent(componentPath, GlobalOptions, Cache).then(function (component) {
            var rendered = Renderer.renderHtmlUtil(component);
            if (!rendered) {
                reject(new Error('Renderer Error'));
            } else {
                if (Options.defaults.style) {
                    Options.defaults.style += rendered.layout.style;
                } else {
                    Options.defaults.style = rendered.layout.style;
                }

                resolve({
                    rendered: rendered,
                    match: vueComponentFileMatch
                });
            }
        }).catch(function (error) {
            reject(error);
        });
    });
}

function replaceRelativePaths(code, rootPath) {
    var parentMatchesSingle = code.match(/(require\('\.\.\/)/gm);
    var currentMatchesSingle = code.match(/(require\('\.\/)/gm);
    var parentMatchesDouble = code.match(/(require\("\.\.\/)/gm);
    var currentMatchesDouble = code.match(/(require\("\.\/)/gm);
    if (parentMatchesSingle) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = parentMatchesSingle[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _match = _step.value;

                code = code.replace(_match, 'require(\'' + rootPath + '/../');
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    if (parentMatchesDouble) {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
            for (var _iterator2 = parentMatchesDouble[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var _match2 = _step2.value;

                code = code.replace(_match2, 'require("' + rootPath + '/../');
            }
        } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                }
            } finally {
                if (_didIteratorError2) {
                    throw _iteratorError2;
                }
            }
        }
    }
    if (currentMatchesSingle) {
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
            for (var _iterator3 = currentMatchesSingle[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _match3 = _step3.value;

                code = code.replace(_match3, 'require(\'' + rootPath + '/./');
            }
        } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                }
            } finally {
                if (_didIteratorError3) {
                    throw _iteratorError3;
                }
            }
        }
    }
    if (currentMatchesDouble) {
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
            for (var _iterator4 = currentMatchesDouble[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _match4 = _step4.value;

                code = code.replace(_match4, 'require("' + rootPath + '/./');
            }
        } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                    _iterator4.return();
                }
            } finally {
                if (_didIteratorError4) {
                    throw _iteratorError4;
                }
            }
        }
    }

    return code;
}

function requireFromString(code) {
    var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var optsObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var Cache = arguments[3];

    return new Promise(function (resolve, reject) {
        var options = new Options(optsObj);
        var promiseArray = [];

        if (typeof code !== 'string') {
            throw new Error('code must be a string, not ' + (typeof code === 'undefined' ? 'undefined' : _typeof(code)));
        }
        code = replaceRelativePaths(code, options.rootPath);
        var paths = Module._nodeModulePaths(path.dirname(filename));
        var m = new Module(filename, options.rootPath);
        m.filename = filename;
        m.paths = [].concat(options.prependPaths).concat(paths).concat(options.appendPaths);

        //find matches for the require paths
        var vueComponentFileMatches = code.match(options.requireRegex);
        if (vueComponentFileMatches && vueComponentFileMatches.length > 0) {
            //iterate through the matches
            for (var index = 0; index < vueComponentFileMatches.length; index++) {
                var vueComponentFileMatch = vueComponentFileMatches[index];
                //get the file out of the require string
                //this is because its easier to do string replace later
                var vueComponentFile = vueComponentFileMatch.match(options.vueFileRegex);
                if (vueComponentFile && vueComponentFile.length > 0) {
                    promiseArray.push(getVueObject(vueComponentFile[0], options.rootPath, vueComponentFileMatch, Cache, options));
                }
            }
            Promise.all(promiseArray).then(function (renderedItemArray) {
                var styles = '';
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = renderedItemArray[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var renderedItem = _step5.value;

                        var rawString = renderedItem.rendered.scriptStringRaw;
                        code = code.replace(renderedItem.match, rawString);
                        if (renderedItem.rendered.layout && renderedItem.rendered.layout.style) {
                            styles += renderedItem.rendered.layout.style;
                        }
                    }
                    //check if its the last element and then render
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }

                var last_element = code.match(options.vueFileRegex);
                if (last_element === undefined || last_element === null) {
                    m._compile(code, filename);
                    m.exports.default.styles = styles;
                    resolve(m.exports.default);
                }
            }).catch(function (error) {
                reject(error);
            });
        } else {
            m._compile(code, filename);
            resolve(m.exports.default);
        }
    });
}

module.exports = requireFromString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,