'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var xss = require('xss');

function routesToString(routes) {
    var string = '';
    routes.forEach(function (script) {
        return string += scriptToString(script) + ',';
    });
    return '[' + string + ']';
}

function routeComponentsToString(script) {
    var string = '';
    for (var member in script) {
        string += member + ': __' + script[member] + ',';
    }
    return '{' + string + '}';
}

function mixinsToString(mixins) {
    var string = '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = mixins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var mixin = _step.value;

            string += scriptToString(mixin) + ',';
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return string;
}

function scriptToString(script) {
    var string = '';
    for (var member in script) {
        switch (_typeof(script[member])) {
            case 'function':
                if (member === 'data') {
                    var dataObj = xss(JSON.stringify(script[member]()));
                    string += member + ': function(){return ' + dataObj + '},';
                } else {
                    string += member + ': ' + String(script[member]) + ',';
                }
                break;
            case 'object':
                if (member === 'data') {
                    string += member + ': ' + xss(JSON.stringify(script[member])) + ',';
                } else if (member === 'routes' || member === 'children') {
                    string += member + ': ' + routesToString(script[member]) + ',';
                } else if (member === 'components' && script['path'] !== undefined) {
                    // Checks if 'components' is in a route object
                    string += member + ': ' + routeComponentsToString(script[member]) + ',';
                } else if (member === 'mixins') {
                    string += member + ': [' + mixinsToString(script[member]) + '],';
                } else if (script[member].constructor === Array) {
                    string += member + ': ' + xss(JSON.stringify(script[member])) + ',';
                } else if (member === 'props') {
                    var propsArray = Object.keys(script[member]);
                    string += member + ': ' + xss(JSON.stringify(propsArray)) + ',';
                } else {
                    string += member + ': ' + scriptToString(script[member]) + ',';
                }
                break;
            default:
                if (member === 'component' && script['path'] !== undefined) {
                    // Checks if 'component' is in a route object
                    string += member + ': __' + script[member] + ',';
                } else {
                    string += member + ': ' + JSON.stringify(script[member]) + ',';
                }
                break;
        }
    }
    return '{' + string + '}';
}

module.exports.scriptToString = scriptToString;
module.exports.mixinsToString = mixinsToString;
module.exports.routesToString = routesToString;
module.exports.routeComponentsToString = routeComponentsToString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9zdHJpbmcuanMiXSwibmFtZXMiOlsieHNzIiwicmVxdWlyZSIsInJvdXRlc1RvU3RyaW5nIiwicm91dGVzIiwic3RyaW5nIiwiZm9yRWFjaCIsInNjcmlwdFRvU3RyaW5nIiwic2NyaXB0Iiwicm91dGVDb21wb25lbnRzVG9TdHJpbmciLCJtZW1iZXIiLCJtaXhpbnNUb1N0cmluZyIsIm1peGlucyIsIm1peGluIiwiZGF0YU9iaiIsIkpTT04iLCJzdHJpbmdpZnkiLCJTdHJpbmciLCJ1bmRlZmluZWQiLCJjb25zdHJ1Y3RvciIsIkFycmF5IiwicHJvcHNBcnJheSIsIk9iamVjdCIsImtleXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsSUFBTUEsTUFBTUMsUUFBUSxLQUFSLENBQVo7O0FBR0EsU0FBU0MsY0FBVCxDQUF3QkMsTUFBeEIsRUFBa0Q7QUFDOUMsUUFBSUMsU0FBUyxFQUFiO0FBQ0FELFdBQU9FLE9BQVAsQ0FBZTtBQUFBLGVBQVVELFVBQVVFLGVBQWVDLE1BQWYsSUFBeUIsR0FBN0M7QUFBQSxLQUFmO0FBQ0EsaUJBQVdILE1BQVg7QUFDSDs7QUFFRCxTQUFTSSx1QkFBVCxDQUFpQ0QsTUFBakMsRUFBeUQ7QUFDckQsUUFBSUgsU0FBUyxFQUFiO0FBQ0EsU0FBSyxJQUFJSyxNQUFULElBQW1CRixNQUFuQixFQUEyQjtBQUN2Qkgsa0JBQVVLLFNBQVMsTUFBVCxHQUFrQkYsT0FBT0UsTUFBUCxDQUFsQixHQUFtQyxHQUE3QztBQUNIO0FBQ0QsaUJBQVdMLE1BQVg7QUFDSDs7QUFFRCxTQUFTTSxjQUFULENBQXdCQyxNQUF4QixFQUEyRDtBQUN2RCxRQUFJUCxTQUFTLEVBQWI7QUFEdUQ7QUFBQTtBQUFBOztBQUFBO0FBRXZELDZCQUFrQk8sTUFBbEIsOEhBQTBCO0FBQUEsZ0JBQWpCQyxLQUFpQjs7QUFDdEJSLHNCQUFhRSxlQUFlTSxLQUFmLENBQWI7QUFDSDtBQUpzRDtBQUFBO0FB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cUIsT0FBT0MsT0FBUCxDQUFlaEIsdUJBQWYsR0FBeUNBLHVCQUF6QyIsImZpbGUiOiJzdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuY29uc3QgeHNzID0gcmVxdWlyZSgneHNzJyk7XG5cblxuZnVuY3Rpb24gcm91dGVzVG9TdHJpbmcocm91dGVzOiBPYmplY3RbXSk6IHN0cmluZyB7XG4gICAgbGV0IHN0cmluZyA9ICcnO1xuICAgIHJvdXRlcy5mb3JFYWNoKHNjcmlwdCA9PiBzdHJpbmcgKz0gc2NyaXB0VG9TdHJpbmcoc2NyaXB0KSArICcsJyk7XG4gICAgcmV0dXJuIGBbJHtzdHJpbmd9XWA7XG59XG5cbmZ1bmN0aW9uIHJvdXRlQ29tcG9uZW50c1RvU3RyaW5nKHNjcmlwdDogT2JqZWN0KTogc3RyaW5nIHtcbiAgICBsZXQgc3RyaW5nID0gJyc7XG4gICAgZm9yIChsZXQgbWVtYmVyIGluIHNjcmlwdCkge1xuICAgICAgICBzdHJpbmcgKz0gbWVtYmVyICsgJzogX18nICsgc2NyaXB0W21lbWJlcl0gKyAnLCc7XG4gICAgfVxuICAgIHJldHVybiBgeyR7c3RyaW5nfX1gO1xufVxuXG5mdW5jdGlvbiBtaXhpbnNUb1N0cmluZyhtaXhpbnM6IEFycmF5IDwgT2JqZWN0ID4gKTogc3RyaW5nIHtcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgZm9yICh2YXIgbWl4aW4gb2YgbWl4aW5zKSB7XG4gICAgICAgIHN0cmluZyArPSBgJHtzY3JpcHRUb1N0cmluZyhtaXhpbil9LGA7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHNjcmlwdFRvU3RyaW5nKHNjcmlwdDogT2JqZWN0KTogc3RyaW5nIHtcbiAgICBsZXQgc3RyaW5nID0gJyc7XG4gICAgZm9yIChsZXQgbWVtYmVyIGluIHNjcmlwdCkge1xuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBzY3JpcHRbbWVtYmVyXSkge1xuICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICAgICAgICAgIGlmIChtZW1iZXIgPT09ICdkYXRhJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhT2JqID0geHNzKEpTT04uc3RyaW5naWZ5KHNjcmlwdFttZW1iZXJdKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IGAke21lbWJlcn06IGZ1bmN0aW9uKCl7cmV0dXJuICR7ZGF0YU9ian19LGA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IG1lbWJlciArICc6ICcgKyBTdHJpbmcoc2NyaXB0W21lbWJlcl0pICsgJywnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICAgICAgaWYgKG1lbWJlciA9PT0gJ2RhdGEnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBtZW1iZXIgKyAnOiAnICsgeHNzKEpTT04uc3RyaW5naWZ5KHNjcmlwdFttZW1iZXJdKSkgKyAnLCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZW1iZXIgPT09ICdyb3V0ZXMnIHx8IG1lbWJlciA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gbWVtYmVyICsgJzogJyArIHJvdXRlc1RvU3RyaW5nKHNjcmlwdFttZW1iZXJdKSArICcsJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lbWJlciA9PT0gJ2NvbXBvbmVudHMnICYmIHNjcmlwdFsncGF0aCddICE9PSB1bmRlZmluZWQpIHsgLy8gQ2hlY2tzIGlmICdjb21wb25lbnRzJyBpcyBpbiBhIHJvdXRlIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gbWVtYmVyICsgJzogJyArIHJvdXRlQ29tcG9uZW50c1RvU3RyaW5nKHNjcmlwdFttZW1iZXJdKSArICcsJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lbWJlciA9PT0gJ21peGlucycpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nICs9IG1lbWJlciArICc6IFsnICsgbWl4aW5zVG9TdHJpbmcoc2NyaXB0W21lbWJlcl0pICsgJ10sJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNjcmlwdFttZW1iZXJdLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gbWVtYmVyICsgJzogJyArIHhzcyhKU09OLnN0cmluZ2lmeShzY3JpcHRbbWVtYmVyXSkpICsgJywnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWVtYmVyID09PSAncHJvcHMnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzQXJyYXkgPSBPYmplY3Qua2V5cyhzY3JpcHRbbWVtYmVyXSk7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBtZW1iZXIgKyAnOiAnICsgeHNzKEpTT04uc3RyaW5naWZ5KHByb3BzQXJyYXkpKSArICcsJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gbWVtYmVyICsgJzogJyArIHNjcmlwdFRvU3RyaW5nKHNjcmlwdFttZW1iZXJdKSArICcsJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmIChtZW1iZXIgPT09ICdjb21wb25lbnQnICYmIHNjcmlwdFsncGF0aCddICE9PSB1bmRlZmluZWQpIHsgLy8gQ2hlY2tzIGlmICdjb21wb25lbnQnIGlzIGluIGEgcm91dGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZyArPSBtZW1iZXIgKyAnOiBfXycgKyBzY3JpcHRbbWVtYmVyXSArICcsJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcgKz0gbWVtYmVyICsgJzogJyArIEpTT04uc3RyaW5naWZ5KHNjcmlwdFttZW1iZXJdKSArICcsJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGB7JHtzdHJpbmd9fWA7XG59XG5cbm1vZHVsZS5leHBvcnRzLnNjcmlwdFRvU3RyaW5nID0gc2NyaXB0VG9TdHJpbmc7XG5tb2R1bGUuZXhwb3J0cy5taXhpbnNUb1N0cmluZyA9IG1peGluc1RvU3RyaW5nO1xubW9kdWxlLmV4cG9ydHMucm91dGVzVG9TdHJpbmcgPSByb3V0ZXNUb1N0cmluZztcbm1vZHVsZS5leHBvcnRzLnJvdXRlQ29tcG9uZW50c1RvU3RyaW5nID0gcm91dGVDb21wb25lbnRzVG9TdHJpbmc7XG4iXX0=