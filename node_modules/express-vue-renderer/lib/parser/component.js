'use strict';

//
var fs = require('fs');
var camelCase = require('camel-case');
var compiler = require('vue-template-compiler');
var styleParser = require('./style');
var htmlParser = require('./html');
var scriptParser = require('./script');

function componentParser(templatePath, defaults, type, Cache) {
    return new Promise(function (resolve, reject) {
        // try to get the component content from the cache
        var cachedComponentContentObject = Cache.get(templatePath);
        if (cachedComponentContentObject) {
            scriptParser(cachedComponentContentObject.parsedContent.script, defaults, type, Cache).then(function (parsedScriptObject) {
                cachedComponentContentObject.script = parsedScriptObject;
                cachedComponentContentObject.script.template = cachedComponentContentObject.template;
                cachedComponentContentObject.styles = parsedScriptObject.styles;
                resolve(cachedComponentContentObject);
            }).catch(function (error) {
                reject(error);
            });
        } else {
            fs.readFile(templatePath, 'utf-8', function (err, content) {
                if (err) {
                    var error = 'Could Not Find Component, I was expecting it to live here \n' + templatePath + ' \nBut I couldn\'t find it there, \xAF\\_(\u30C4)_/\xAF\n\n';
                    reject(error);
                } else {
                    parseContent(content, templatePath, defaults, type, Cache).then(function (contentObject) {
                        // set the cache for the component
                        Cache.set(templatePath, contentObject);
                        resolve(contentObject);
                    }).catch(function (error) {
                        reject(error);
                    });
                }
            });
        }
    });
}

function parseContent(content, templatePath, defaults, type, Cache) {
    return new Promise(function (resolve, reject) {
        var templateArray = templatePath.split('/');
        if (templateArray.length === 0) {
            var error = 'I had an error processing component templates. in this file \n' + templatePath;
            console.error(new Error(error));
            reject(error);
        } else if (content) {
            var templateName = templateArray[templateArray.length - 1].replace('.vue', '');

            //Setup official component parser..
            var parsedContent = compiler.parseComponent(content);
            if (!parsedContent.template && !parsedContent.script && !parsedContent.styles) {
                reject(new Error('Could not parse the file at ' + templatePath));
            } else {

                var promiseArray = [htmlParser(parsedContent.template, true), scriptParser(parsedContent.script, defaults, type, Cache), styleParser(parsedContent.styles)];

                Promise.all(promiseArray).then(function (resultsArray) {
                    var template = resultsArray[0];
                    var script = resultsArray[1];
                    if (defaults.style === undefined) {
                        defaults.style = resultsArray[2];
                    } else {
                        defaults.style += resultsArray[2];
                    }

                    script.template = template;

                    var componentObjectCTOR = {
                        template: template,
                        parsedContent: parsedContent,
                        type: type,
                        style: defaults.style,
                        name: camelCase(templateName),
                        script: script
                    };
                    resolve(componentObjectCTOR);
                }).catch(function (error) {
                    reject(error);
                });
            }
        } else {
            reject(new Error('missing content block from ' + templatePath + ' something went wrong with loading the file'));
        }
    });
}

module.exports = componentParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsImNhbWVsQ2FzZSIsImNvbXBpbGVyIiwic3R5bGVQYXJzZXIiLCJodG1sUGFyc2VyIiwic2NyaXB0UGFyc2VyIiwiY29tcG9uZW50UGFyc2VyIiwidGVtcGxhdGVQYXRoIiwiZGVmYXVsdHMiLCJ0eXBlIiwiQ2FjaGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhY2hlZENvbXBvbmVudENvbnRlbnRPYmplY3QiLCJnZXQiLCJwYXJzZWRDb250ZW50Iiwic2NyaXB0IiwidGhlbiIsInBhcnNlZFNjcmlwdE9iamVjdCIsInRlbXBsYXRlIiwic3R5bGVzIiwiY2F0Y2giLCJlcnJvciIsInJlYWRGaWxlIiwiZXJyIiwiY29udGVudCIsInBhcnNlQ29udGVudCIsInNldCIsImNvbnRlbnRPYmplY3QiLCJ0ZW1wbGF0ZUFycmF5Iiwic3BsaXQiLCJsZW5ndGgiLCJjb25zb2xlIiwiRXJyb3IiLCJ0ZW1wbGF0ZU5hbWUiLCJyZXBsYWNlIiwicGFyc2VDb21wb25lbnQiLCJwcm9taXNlQXJyYXkiLCJhbGwiLCJyZXN1bHRzQXJyYXkiLCJzdHlsZSIsInVuZGVmaW5lZCIsImNvbXBvbmVudE9iamVjdENUT1IiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBLElBQU1BLEtBQUtDLFFBQVEsSUFBUixDQUFYO0FBQ0EsSUFBTUMsWUFBWUQsUUFBUSxZQUFSLENBQWxCO0FBQ0EsSUFBTUUsV0FBV0YsUUFBUSx1QkFBUixDQUFqQjtBQUNBLElBQU1HLGNBQWNILFFBQVEsU0FBUixDQUFwQjtBQUNBLElBQU1JLGFBQWFKLFFBQVEsUUFBUixDQUFuQjtBQUNBLElBQU1LLGVBQWVMLFFBQVEsVUFBUixDQUFyQjs7QUFHQSxTQUFTTSxlQUFULENBQXlCQyxZQUF6QixFQUErQ0MsUUFBL0MsRUFBaUVDLElBQWpFLEVBQStF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M0Msd0JBQU1FLFdBQVdvQixhQUFhLENBQWIsQ0FBakI7QUFDQSx3QkFBTXZCLFNBQVN1QixhQUFhLENBQWIsQ0FBZjtBQUNBLHdCQUFJaEMsU0FBU2lDLEtBQVQsS0FBbUJDLFNBQXZCLEVBQWtDO0FBQzlCbEMsaUNBQVNpQyxLQUFULEdBQWlCRCxhQUFhLENBQWIsQ0FBakI7QUFDSCxxQkFGRCxNQUVPO0FBQ0hoQyxpQ0FBU2lDLEtBQVQsSUFBa0JELGFBQWEsQ0FBYixDQUFsQjtBQUNIOztBQUVEdkIsMkJBQU9HLFFBQVAsR0FBa0JBLFFBQWxCOztBQUVBLHdCQUFNdUIsc0JBQXNCO0FBQ3hCdkIsa0NBQVVBLFFBRGM7QUFFeEJKLHVDQUFlQSxhQUZTO0FBR3hCUCw4QkFBTUEsSUFIa0I7QUFJeEJnQywrQkFBT2pDLFNBQVNpQyxLQUpRO0FBS3hCRyw4QkFBTTNDLFVBQVVrQyxZQUFWLENBTGtCO0FBTXhCbEIsZ0NBQVFBO0FBTmdCLHFCQUE1QjtBQVFBTCw0QkFBUStCLG1CQUFSO0FBQ0gsaUJBcEJELEVBb0JHckIsS0FwQkgsQ0FvQlMsaUJBQVM7QUFDZFQsMkJBQU9VLEtBQVA7QUFDSCxpQkF0QkQ7QUF1Qkg7QUFDSixTQXZDTSxNQXVDQTtBQUNIVixtQkFBTyxJQUFJcUIsS0FBSixpQ0FBd0MzQixZQUF4QyxpREFBUDtBQUNIO0FBQ0osS0FoRE0sQ0FBUDtBQWlESDs7QUFFRHNDLE9BQU9DLE9BQVAsR0FBaUJ4QyxlQUFqQiIsImZpbGUiOiJjb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuLy9cbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IGNhbWVsQ2FzZSA9IHJlcXVpcmUoJ2NhbWVsLWNhc2UnKTtcbmNvbnN0IGNvbXBpbGVyID0gcmVxdWlyZSgndnVlLXRlbXBsYXRlLWNvbXBpbGVyJyk7XG5jb25zdCBzdHlsZVBhcnNlciA9IHJlcXVpcmUoJy4vc3R5bGUnKTtcbmNvbnN0IGh0bWxQYXJzZXIgPSByZXF1aXJlKCcuL2h0bWwnKTtcbmNvbnN0IHNjcmlwdFBhcnNlciA9IHJlcXVpcmUoJy4vc2NyaXB0Jyk7XG5cblxuZnVuY3Rpb24gY29tcG9uZW50UGFyc2VyKHRlbXBsYXRlUGF0aDogc3RyaW5nLCBkZWZhdWx0czogT2JqZWN0LCB0eXBlOiBzdHJpbmcsIENhY2hlOiBPYmplY3QpOiBQcm9taXNlIDwgT2JqZWN0ID4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIHRyeSB0byBnZXQgdGhlIGNvbXBvbmVudCBjb250ZW50IGZyb20gdGhlIGNhY2hlXG4gICAgICAgIGNvbnN0IGNhY2hlZENvbXBvbmVudENvbnRlbnRPYmplY3QgPSBDYWNoZS5nZXQodGVtcGxhdGVQYXRoKTtcbiAgICAgICAgaWYgKGNhY2hlZENvbXBvbmVudENvbnRlbnRPYmplY3QpIHtcbiAgICAgICAgICAgIHNjcmlwdFBhcnNlcihjYWNoZWRDb21wb25lbnRDb250ZW50T2JqZWN0LnBhcnNlZENvbnRlbnQuc2NyaXB0LCBkZWZhdWx0cywgdHlwZSwgQ2FjaGUpLnRoZW4ocGFyc2VkU2NyaXB0T2JqZWN0ID0+IHtcbiAgICAgICAgICAgICAgICBjYWNoZWRDb21wb25lbnRDb250ZW50T2JqZWN0LnNjcmlwdCA9IHBhcnNlZFNjcmlwdE9iamVjdDtcbiAgICAgICAgICAgICAgICBjYWNoZWRDb21wb25lbnRDb250ZW50T2JqZWN0LnNjcmlwdC50ZW1wbGF0ZSA9IGNhY2hlZENvbXBvbmVudENvbnRlbnRPYmplY3QudGVtcGxhdGU7XG4gICAgICAgICAgICAgICAgY2FjaGVkQ29tcG9uZW50Q29udGVudE9iamVjdC5zdHlsZXMgPSBwYXJzZWRTY3JpcHRPYmplY3Quc3R5bGVzO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoY2FjaGVkQ29tcG9uZW50Q29udGVudE9iamVjdCk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnMucmVhZEZpbGUodGVtcGxhdGVQYXRoLCAndXRmLTgnLCBmdW5jdGlvbiAoZXJyLCBjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3IgPSBgQ291bGQgTm90IEZpbmQgQ29tcG9uZW50LCBJIHdhcyBleHBlY3RpbmcgaXQgdG8gbGl2ZSBoZXJlIFxcbiR7dGVtcGxhdGVQYXRofSBcXG5CdXQgSSBjb3VsZG4ndCBmaW5kIGl0IHRoZXJlLCDCr1xcXFxfKOODhClfL8KvXFxuXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUNvbnRlbnQoY29udGVudCwgdGVtcGxhdGVQYXRoLCBkZWZhdWx0cywgdHlwZSwgQ2FjaGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihjb250ZW50T2JqZWN0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgY2FjaGUgZm9yIHRoZSBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWNoZS5zZXQodGVtcGxhdGVQYXRoLCBjb250ZW50T2JqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbnRlbnRPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZUNvbnRlbnQoY29udGVudDogc3RyaW5nLCB0ZW1wbGF0ZVBhdGg6IHN0cmluZywgZGVmYXVsdHM6IE9iamVjdCwgdHlwZTogc3RyaW5nLCBDYWNoZTogT2JqZWN0KTogUHJvbWlzZSA8IE9iamVjdCA+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZUFycmF5ID0gdGVtcGxhdGVQYXRoLnNwbGl0KCcvJyk7XG4gICAgICAgIGlmICh0ZW1wbGF0ZUFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbGV0IGVycm9yID0gYEkgaGFkIGFuIGVycm9yIHByb2Nlc3NpbmcgY29tcG9uZW50IHRlbXBsYXRlcy4gaW4gdGhpcyBmaWxlIFxcbiR7dGVtcGxhdGVQYXRofWA7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBFcnJvcihlcnJvcikpO1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgICBsZXQgdGVtcGxhdGVOYW1lID0gdGVtcGxhdGVBcnJheVt0ZW1wbGF0ZUFycmF5Lmxlbmd0aCAtIDFdLnJlcGxhY2UoJy52dWUnLCAnJyk7XG5cbiAgICAgICAgICAgIC8vU2V0dXAgb2ZmaWNpYWwgY29tcG9uZW50IHBhcnNlci4uXG4gICAgICAgICAgICBjb25zdCBwYXJzZWRDb250ZW50ID0gY29tcGlsZXIucGFyc2VDb21wb25lbnQoY29udGVudCk7XG4gICAgICAgICAgICBpZiAoIXBhcnNlZENvbnRlbnQudGVtcGxhdGUgJiYgIXBhcnNlZENvbnRlbnQuc2NyaXB0ICYmICFwYXJzZWRDb250ZW50LnN0eWxlcykge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYENvdWxkIG5vdCBwYXJzZSB0aGUgZmlsZSBhdCAke3RlbXBsYXRlUGF0aH1gKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZUFycmF5ID0gW1xuICAgICAgICAgICAgICAgICAgICBodG1sUGFyc2VyKHBhcnNlZENvbnRlbnQudGVtcGxhdGUsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICBzY3JpcHRQYXJzZXIocGFyc2VkQ29udGVudC5zY3JpcHQsIGRlZmF1bHRzLCB0eXBlLCBDYWNoZSksXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlUGFyc2VyKHBhcnNlZENvbnRlbnQuc3R5bGVzKVxuICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlQXJyYXkpLnRoZW4ocmVzdWx0c0FycmF5ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSByZXN1bHRzQXJyYXlbMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjcmlwdCA9IHJlc3VsdHNBcnJheVsxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRzLnN0eWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRzLnN0eWxlID0gcmVzdWx0c0FycmF5WzJdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHMuc3R5bGUgKz0gcmVzdWx0c0FycmF5WzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgc2NyaXB0LnRlbXBsYXRlID0gdGVtcGxhdGU7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50T2JqZWN0Q1RPUiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlZENvbnRlbnQ6IHBhcnNlZENvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGRlZmF1bHRzLnN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogY2FtZWxDYXNlKHRlbXBsYXRlTmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbXBvbmVudE9iamVjdENUT1IpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYG1pc3NpbmcgY29udGVudCBibG9jayBmcm9tICR7dGVtcGxhdGVQYXRofSBzb21ldGhpbmcgd2VudCB3cm9uZyB3aXRoIGxvYWRpbmcgdGhlIGZpbGVgKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnRQYXJzZXI7XG4iXX0=