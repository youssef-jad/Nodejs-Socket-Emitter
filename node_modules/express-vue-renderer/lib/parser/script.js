'use strict';

var _require = require('../models'),
    DataObject = _require.DataObject;

var Utils = require('../utils');
var babel = require('babel-core');
var stringHash = require('string-hash');

function dataMerge(script, defaults, type) {
    var finalScript = {};
    for (var element in script) {
        if (script.hasOwnProperty(element)) {
            if (element === 'data') {
                (function () {
                    var data = new DataObject(script.data(), defaults.data, type).data;
                    finalScript[element] = function () {
                        return data;
                    };
                })();
            } else {
                finalScript[element] = script[element];
            }
        }
    }
    //FUCK THIS _Ctor property fuck this fucking thing
    //fuck you you fucking fuckstick i cant believe this
    //is the offical vue-loader fix

    if (finalScript.components) {
        finalScript = deleteCtor(finalScript);
    }
    return finalScript;
}

function deleteCtor(script) {
    for (var component in script.components) {
        if (script.components.hasOwnProperty(component)) {
            delete script.components[component]._Ctor;
            if (script.components[component].components) {
                script.components[component] = deleteCtor(script.components[component]);
            }
        }
    }
    return script;
}

function scriptParser(scriptObject, defaults, type, Cache) {
    return new Promise(function (resolve, reject) {
        if (!scriptObject && !scriptObject.content) {
            reject(new Error('Missing Script block'));
        } else {
            var options = {
                'presets': ['es2015']
            };
            // caching for babel script string so time spent in babel is reduced
            var cacheKey = stringHash(scriptObject.content);
            var cachedBabelScript = Cache.get(cacheKey);
            if (cachedBabelScript) {
                var finalScript = dataMerge(cachedBabelScript, defaults, type);
                resolve(finalScript);
            } else {
                var babelScript = babel.transform(scriptObject.content, options);
                // const filename = path.join(defaults.rootPath, '/', defaults.component);
                var requireFromStringOptions = {
                    rootPath: defaults.rootPath,
                    defaults: defaults
                };
                Utils.requireFromString(babelScript.code, defaults.component, requireFromStringOptions, Cache).then(function (scriptFromString) {
                    // set the cache for the babel script string
                    Cache.set(cacheKey, scriptFromString);

                    var finalScript = dataMerge(scriptFromString, defaults, type);
                    resolve(finalScript);
                }).catch(function (error) {
                    return reject(error);
                });
            }
        }
    });
}

module.exports = scriptParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvc2NyaXB0LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJEYXRhT2JqZWN0IiwiVXRpbHMiLCJiYWJlbCIsInN0cmluZ0hhc2giLCJkYXRhTWVyZ2UiLCJzY3JpcHQiLCJkZWZhdWx0cyIsInR5cGUiLCJmaW5hbFNjcmlwdCIsImVsZW1lbnQiLCJoYXNPd25Qcm9wZXJ0eSIsImRhdGEiLCJjb21wb25lbnRzIiwiZGVsZXRlQ3RvciIsImNvbXBvbmVudCIsIl9DdG9yIiwic2NyaXB0UGFyc2VyIiwic2NyaXB0T2JqZWN0IiwiQ2FjaGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbnRlbnQiLCJFcnJvciIsIm9wdGlvbnMiLCJjYWNoZUtleSIsImNhY2hlZEJhYmVsU2NyaXB0IiwiZ2V0IiwiYmFiZWxTY3JpcHQiLCJ0cmFuc2Zvcm0iLCJyZXF1aXJlRnJvbVN0cmluZ09wdGlvbnMiLCJyb290UGF0aCIsInJlcXVpcmVGcm9tU3RyaW5nIiwiY29kZSIsInRoZW4iLCJzZXQiLCJzY3JpcHRGcm9tU3RyaW5nIiwiY2F0Y2giLCJlcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O2VBR0lBLFFBQVEsV0FBUixDO0lBREFDLFUsWUFBQUEsVTs7QUFHSixJQUFNQyxRQUFRRixRQUFRLFVBQVIsQ0FBZDtBQUNBLElBQU1HLFFBQVFILFFBQVEsWUFBUixDQUFkO0FBQ0EsSUFBTUksYUFBYUosUUFBUSxhQUFSLENBQW5COztBQVVBLFNBQVNLLFNBQVQsQ0FBbUJDLE1BQW5CLEVBQW1DQyxRQUFuQyxFQUFxREMsSUFBckQsRUFBMkU7QUFDdkUsUUFBSUMsY0FBYyxFQUFsQjtBQUNBLFNBQUssSUFBSUMsT0FBVCxJQUFvQkosTUFBcEIsRUFBNEI7QUFDeEIsWUFBSUEsT0FBT0ssY0FBUCxDQUFzQkQsT0FBdEIsQ0FBSixFQUFvQztBQUNoQyxnQkFBSUEsWUFBWSxNQUFoQixFQUF3QjtBQUFBO0FBQ3BCLHdCQUFJRSxPQUFPLElBQUlYLFVBQUosQ0FBZUssT0FBT00sSUFBUCxFQUFmLEVBQThCTCxTQUFTSyxJQUF2QyxFQUE2Q0osSUFBN0MsRUFBbURJLElBQTlEO0FBQ0FILGdDQUFZQyxPQUFaLElBQXVCO0FBQUEsK0JBQU1FLElBQU47QUFBQSxxQkFBdkI7QUFGb0I7QUFHdkIsYUFIRCxNQUdPO0FBQ0hILDRCQUFZQyxPQUFaLElBQXVCSixPQUFPSSxPQUFQLENBQXZCO0FBQ0g7QUFDSjtBQUNKO0FBQ0Q7QUFDQTtBQUNBOztBQUVBLFFBQUlELFlBQVlJLFVBQWhCLEVBQTRCO0FBQ3hCSixzQkFBY0ssV0FBV0wsV0FBWCxDQUFkO0FBQ0g7QUFDRCxXQUFPQSxXQUFQO0FBQ0g7O0FBRUQsU0FBU0ssVUFBVCxDQUFvQlIsTUFBcEIsRUFBNEM7QUFDeEMsU0FBSyxJQUFJUyxTQUFULElBQXNCVCxPQUFPTyxVQUE3QixFQUF5QztBQUNyQyxZQUFJUCxPQUFPTyxVQUFQLENBQWtCRixjQUFsQixDQUFpQ0ksU0FBakMsQ0FBSixFQUFpRDtBQUM3QyxtQkFBT1QsT0FBT08sVUFBUCxDQUFrQkUsU0FBbEIsRUFBNkJDLEtBQXBDO0FBQ0EsZ0JBQUlWLE9BQU9PLFVBQVAsQ0FBa0JFLFNBQWxCLEVBQTZCRixVQUFqQyxFQUE2QztBQUN6Q1AsdUJBQU9PLFVBQVAsQ0FBa0JFLFNBQWxCLElBQStCRCxXQUFXUixPQUFPTyxVQUFQLENBQWtCRSxTQUFsQixDQUFYLENBQS9CO0FBQ0g7QUFDSjtBQUVKO0FBQ0QsV0FBT1QsTUFBUDtBQUNIOztBQUVELFNBQVNXLFlBQVQsQ0FBc0JDLFlBQXRCLEVBQXNEWCxRQUF0RCxFQUF3RUMsSUFBeEUsRUFBc0ZXLEtBQXRGLEVBQXlIO0FBQ3JILFdBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUNwQyxZQUFJLENBQUNKLFlBQUQsSUFBaUIsQ0FBQ0EsYUFBYUssT0FBbkMsRUFBNEM7QUFDeENELG1CQUFPLElBQUlFLEtBQUosQ0FBVSxzQkFBVixDQUFQO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsZ0JBQU1DLFVBQVU7QUFDWiwyQkFBVyxDQUFDLFFBQUQ7QUFEQyxhQUFoQjtBQUdBO0FBQ0EsZ0JBQU1DLFdBQVd0QixXQUFXYyxhQUFhSyxPQUF4QixDQUFqQjtBQUNBLGdCQUFNSSxvQkFBb0JSLE1BQU1TLEdBQU4sQ0FBVUYsUUFBVixDQUExQjtBQUNBLGdCQUFJQyxpQkFBSixFQUF1QjtBQUNuQixvQkFBTWxCLGNBQWNKLFVBQVVzQixpQkFBVixFQUE2QnBCLFFBQTdCLEVBQXVDQyxJQUF2QyxDQUFwQjtBQUNBYSx3QkFBUVosV0FBUjtBQUNILGFBSEQsTUFHTztBQUNILG9CQUFNb0IsY0FBYzFCLE1BQU0yQixTQUFOLENBQWdCWixhQUFhSyxPQUE3QixFQUFzQ0UsT0FBdEMsQ0FBcEI7QUFDQTtBQUNBLG9CQUFNTSwyQkFBMkI7QUFDN0JDLDhCQUFVekIsU0FBU3lCLFFBRFU7QUFFN0J6Qiw4QkFBVUE7QUFGbUIsaUJBQWpDO0FBSUFMLHNCQUFNK0IsaUJBQU4sQ0FBd0JKLFlBQVlLLElBQXBDLEVBQTBDM0IsU0FBU1EsU0FBbkQsRUFBOERnQix3QkFBOUQsRUFBd0ZaLEtBQXhGLEVBQ0tnQixJQURMLENBQ1UsNEJBQW9CO0FBQ3RCO0FBQ0FoQiwwQkFBTWlCLEdBQU4sQ0FBVVYsUUFBVixFQUFvQlcsZ0JBQXBCOztBQUVBLHdCQUFNNUIsY0FBY0osVUFBVWdDLGdCQUFWLEVBQTRCOUIsUUFBNUIsRUFBc0NDLElBQXRDLENBQXBCO0FBQ0FhLDRCQUFRWixXQUFSO0FBQ0gsaUJBUEwsRUFRSzZCLEtBUkwsQ0FRVztBQUFBLDJCQUFTaEIsT0FBT2lCLEtBQVAsQ0FBVDtBQUFBLGlCQVJYO0FBU0g7QUFFSjtBQUNKLEtBaENNLENBQVA7QUFpQ0g7O0FBRURDLE9BQU9DLE9BQVAsR0FBaUJ4QixZQUFqQiIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuY29uc3Qge1xuICAgIERhdGFPYmplY3Rcbn0gPSByZXF1aXJlKCcuLi9tb2RlbHMnKTtcblxuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuY29uc3QgYmFiZWwgPSByZXF1aXJlKCdiYWJlbC1jb3JlJyk7XG5jb25zdCBzdHJpbmdIYXNoID0gcmVxdWlyZSgnc3RyaW5nLWhhc2gnKTtcblxudHlwZSBTY3JpcHRPYmplY3RUeXBlID0ge1xuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGNvbnRlbnQ6ICdzdHJpbmcnLFxuICAgIHN0YXJ0OiBudW1iZXIsXG4gICAgYXR0cnM6IE9iamVjdCxcbiAgICBlbmQ6IG51bWJlclxufVxuXG5mdW5jdGlvbiBkYXRhTWVyZ2Uoc2NyaXB0OiBPYmplY3QsIGRlZmF1bHRzOiBPYmplY3QsIHR5cGU6IHN0cmluZyk6IE9iamVjdCB7XG4gICAgbGV0IGZpbmFsU2NyaXB0ID0ge307XG4gICAgZm9yICh2YXIgZWxlbWVudCBpbiBzY3JpcHQpIHtcbiAgICAgICAgaWYgKHNjcmlwdC5oYXNPd25Qcm9wZXJ0eShlbGVtZW50KSkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09ICdkYXRhJykge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gbmV3IERhdGFPYmplY3Qoc2NyaXB0LmRhdGEoKSwgZGVmYXVsdHMuZGF0YSwgdHlwZSkuZGF0YTtcbiAgICAgICAgICAgICAgICBmaW5hbFNjcmlwdFtlbGVtZW50XSA9ICgpID0+IGRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbmFsU2NyaXB0W2VsZW1lbnRdID0gc2NyaXB0W2VsZW1lbnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vRlVDSyBUSElTIF9DdG9yIHByb3BlcnR5IGZ1Y2sgdGhpcyBmdWNraW5nIHRoaW5nXG4gICAgLy9mdWNrIHlvdSB5b3UgZnVja2luZyBmdWNrc3RpY2sgaSBjYW50IGJlbGlldmUgdGhpc1xuICAgIC8vaXMgdGhlIG9mZmljYWwgdnVlLWxvYWRlciBmaXhcblxuICAgIGlmIChmaW5hbFNjcmlwdC5jb21wb25lbnRzKSB7XG4gICAgICAgIGZpbmFsU2NyaXB0ID0gZGVsZXRlQ3RvcihmaW5hbFNjcmlwdCk7XG4gICAgfVxuICAgIHJldHVybiBmaW5hbFNjcmlwdDtcbn1cblxuZnVuY3Rpb24gZGVsZXRlQ3RvcihzY3JpcHQ6IE9iamVjdCk6IE9iamVjdCB7XG4gICAgZm9yIChsZXQgY29tcG9uZW50IGluIHNjcmlwdC5jb21wb25lbnRzKSB7XG4gICAgICAgIGlmIChzY3JpcHQuY29tcG9uZW50cy5oYXNPd25Qcm9wZXJ0eShjb21wb25lbnQpKSB7XG4gICAgICAgICAgICBkZWxldGUgc2NyaXB0LmNvbXBvbmVudHNbY29tcG9uZW50XS5fQ3RvcjtcbiAgICAgICAgICAgIGlmIChzY3JpcHQuY29tcG9uZW50c1tjb21wb25lbnRdLmNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgICAgICBzY3JpcHQuY29tcG9uZW50c1tjb21wb25lbnRdID0gZGVsZXRlQ3RvcihzY3JpcHQuY29tcG9uZW50c1tjb21wb25lbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuICAgIHJldHVybiBzY3JpcHQ7XG59XG5cbmZ1bmN0aW9uIHNjcmlwdFBhcnNlcihzY3JpcHRPYmplY3Q6IFNjcmlwdE9iamVjdFR5cGUsIGRlZmF1bHRzOiBPYmplY3QsIHR5cGU6IHN0cmluZywgQ2FjaGU6IE9iamVjdCk6IFByb21pc2UgPCBPYmplY3QgPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKCFzY3JpcHRPYmplY3QgJiYgIXNjcmlwdE9iamVjdC5jb250ZW50KSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdNaXNzaW5nIFNjcmlwdCBibG9jaycpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgJ3ByZXNldHMnOiBbJ2VzMjAxNSddXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gY2FjaGluZyBmb3IgYmFiZWwgc2NyaXB0IHN0cmluZyBzbyB0aW1lIHNwZW50IGluIGJhYmVsIGlzIHJlZHVjZWRcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gc3RyaW5nSGFzaChzY3JpcHRPYmplY3QuY29udGVudCk7XG4gICAgICAgICAgICBjb25zdCBjYWNoZWRCYWJlbFNjcmlwdCA9IENhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICAgICAgICBpZiAoY2FjaGVkQmFiZWxTY3JpcHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaW5hbFNjcmlwdCA9IGRhdGFNZXJnZShjYWNoZWRCYWJlbFNjcmlwdCwgZGVmYXVsdHMsIHR5cGUpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoZmluYWxTY3JpcHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYWJlbFNjcmlwdCA9IGJhYmVsLnRyYW5zZm9ybShzY3JpcHRPYmplY3QuY29udGVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgLy8gY29uc3QgZmlsZW5hbWUgPSBwYXRoLmpvaW4oZGVmYXVsdHMucm9vdFBhdGgsICcvJywgZGVmYXVsdHMuY29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1aXJlRnJvbVN0cmluZ09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RQYXRoOiBkZWZhdWx0cy5yb290UGF0aCxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdHM6IGRlZmF1bHRzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBVdGlscy5yZXF1aXJlRnJvbVN0cmluZyhiYWJlbFNjcmlwdC5jb2RlLCBkZWZhdWx0cy5jb21wb25lbnQsIHJlcXVpcmVGcm9tU3RyaW5nT3B0aW9ucywgQ2FjaGUpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHNjcmlwdEZyb21TdHJpbmcgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBjYWNoZSBmb3IgdGhlIGJhYmVsIHNjcmlwdCBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIENhY2hlLnNldChjYWNoZUtleSwgc2NyaXB0RnJvbVN0cmluZyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsU2NyaXB0ID0gZGF0YU1lcmdlKHNjcmlwdEZyb21TdHJpbmcsIGRlZmF1bHRzLCB0eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZmluYWxTY3JpcHQpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gcmVqZWN0KGVycm9yKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNjcmlwdFBhcnNlcjtcbiJdfQ==