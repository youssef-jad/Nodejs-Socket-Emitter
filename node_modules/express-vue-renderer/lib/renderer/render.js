'use strict';

var Utils = require('../utils');
var Vue = require('vue');

var butternut = require('butternut');
var buttterNutOptions = {
    sourceMap: false
};

function createApp(script) {
    return new Vue(script);
}

function layoutUtil(component) {
    var layout = {};
    layout.style = '';
    layout.script = component.script;
    if (component.style.length > 0) {
        layout.style += component.style;
    }
    return layout;
}

function renderedScript(script, router) {
    var routerString = router !== undefined ? 'const __router = new VueRouter(' + Utils.scriptToString(router) + ');' : '';
    var scriptString = Utils.scriptToString(script);
    var debugToolsString = '';

    if (router !== undefined) {
        scriptString = scriptString.substr(0, 1) + 'router: __router,' + scriptString.substr(1);
    }
    if (process.env.VUE_DEV) {
        debugToolsString = 'Vue.config.devtools = true;';
    }
    var javaScriptString = '(function () {\'use strict\';' + routerString + 'var createApp = function () {return new Vue(' + scriptString + ')};if (typeof module !== \'undefined\' && module.exports) {module.exports = createApp} else {this.app = createApp()}}).call(this);' + debugToolsString + 'app.$mount(\'#app\');';
    var finalString = butternut.squash(javaScriptString, buttterNutOptions).code;

    return '<script>' + finalString + '</script>';
}

function renderHtmlUtil(component) {
    var layout = layoutUtil(component);
    var renderedScriptString = renderedScript(layout.script);
    var app = createApp(layout.script);

    return {
        app: app,
        scriptString: renderedScriptString,
        layout: layout,
        scriptStringRaw: Utils.scriptToString(layout.script)
    };
}

module.exports.layoutUtil = layoutUtil;
module.exports.renderHtmlUtil = renderHtmlUtil;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW5kZXJlci9yZW5kZXIuanMiXSwibmFtZXMiOlsiVXRpbHMiLCJyZXF1aXJlIiwiVnVlIiwiYnV0dGVybnV0IiwiYnV0dHRlck51dE9wdGlvbnMiLCJzb3VyY2VNYXAiLCJjcmVhdGVBcHAiLCJzY3JpcHQiLCJsYXlvdXRVdGlsIiwiY29tcG9uZW50IiwibGF5b3V0Iiwic3R5bGUiLCJsZW5ndGgiLCJyZW5kZXJlZFNjcmlwdCIsInJvdXRlciIsInJvdXRlclN0cmluZyIsInVuZGVmaW5lZCIsInNjcmlwdFRvU3RyaW5nIiwic2NyaXB0U3RyaW5nIiwiZGVidWdUb29sc1N0cmluZyIsInN1YnN0ciIsInByb2Nlc3MiLCJlbnYiLCJWVUVfREVWIiwiamF2YVNjcmlwdFN0cmluZyIsImZpbmFsU3RyaW5nIiwic3F1YXNoIiwiY29kZSIsInJlbmRlckh0bWxVdGlsIiwicmVuZGVyZWRTY3JpcHRTdHJpbmciLCJhcHAiLCJzY3JpcHRTdHJpbmdSYXciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUNBLElBQU1BLFFBQVFDLFFBQVEsVUFBUixDQUFkO0FBQ0EsSUFBTUMsTUFBTUQsUUFBUSxLQUFSLENBQVo7O0FBRUEsSUFBTUUsWUFBWUYsUUFBUSxXQUFSLENBQWxCO0FBQ0EsSUFBTUcsb0JBQW9CO0FBQ3RCQyxlQUFXO0FBRFcsQ0FBMUI7O0FBSUEsU0FBU0MsU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkI7QUFDdkIsV0FBTyxJQUFJTCxHQUFKLENBQVFLLE1BQVIsQ0FBUDtBQUNIOztBQUVELFNBQVNDLFVBQVQsQ0FBb0JDLFNBQXBCLEVBQXVDO0FBQ25DLFFBQUlDLFNBQVMsRUFBYjtBQUNBQSxXQUFPQyxLQUFQLEdBQWUsRUFBZjtBQUNBRCxXQUFPSCxNQUFQLEdBQWdCRSxVQUFVRixNQUExQjtBQUNBLFFBQUlFLFVBQVVFLEtBQVYsQ0FBZ0JDLE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQzVCRixlQUFPQyxLQUFQLElBQWdCRixVQUFVRSxLQUExQjtBQUNIO0FBQ0QsV0FBT0QsTUFBUDtBQUNIOztBQUdELFNBQVNHLGNBQVQsQ0FBd0JOLE1BQXhCLEVBQXdDTyxNQUF4QyxFQUF3RDtBQUNwRCxRQUFNQyxlQUFlRCxXQUFXRSxTQUFYLHVDQUF5RGhCLE1BQU1pQixjQUFOLENBQXFCSCxNQUFyQixDQUF6RCxVQUE0RixFQUFqSDtBQUNBLFFBQUlJLGVBQWVsQixNQUFNaUIsY0FBTixDQUFxQlYsTUFBckIsQ0FBbkI7QUFDQSxRQUFJWSxtQkFBbUIsRUFBdkI7O0FBRUEsUUFBSUwsV0FBV0UsU0FBZixFQUEwQjtBQUN0QkUsdUJBQWVBLGFBQWFFLE1BQWIsQ0FBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsSUFBNEIsbUJBQTVCLEdBQWtERixhQUFhRSxNQUFiLENBQW9CLENBQXBCLENBQWpFO0FBQ0g7QUFDRCxRQUFJQyxRQUFRQyxHQUFSLENBQVlDLE9BQWhCLEVBQXlCO0FBQ3JCSiwyQkFBbUIsNkJBQW5CO0FBQ0g7QUFDRCxRQUFNSyxxREFBaURULFlBQWpELG9EQUE0R0csWUFBNUcsMElBQTJQQyxnQkFBM1AsMEJBQU47QUFDQSxRQUFNTSxjQUFjdEIsVUFBVXVCLE1BQVYsQ0FBaUJGLGdCQUFqQixFQUFtQ3BCLGlCQUFuQyxFQUFzRHVCLElBQTFFOztBQUVBLHdCQUFrQkYsV0FBbEI7QUFDSDs7QUFTRCxTQUFTRyxjQUFULENBQXdCbkIsU0FBeEIsRUFBeUQ7QUFDckQsUUFBTUMsU0FBU0YsV0FBV0MsU0FBWCxDQUFmO0FBQ0EsUUFBTW9CLHVCQUF1QmhCLGVBQWVILE9BQU9ILE1BQXRCLENBQTdCO0FBQ0EsUUFBTXVCLE1BQU14QixVQUFVSSxPQUFPSCxNQUFqQixDQUFaOztBQUVBLFdBQU87QUFDSHVCLGFBQUtBLEdBREY7QUFFSFosc0JBQWNXLG9CQUZYO0FBR0huQixnQkFBUUEsTUFITDtBQUlIcUIseUJBQWlCL0IsTUFBTWlCLGNBQU4sQ0FBcUJQLE9BQU9ILE1BQTVCO0FBSmQsS0FBUDtBQU1IOztBQUVEeUIsT0FBT0MsT0FBUCxDQUFlekIsVUFBZixHQUE0QkEsVUFBNUI7QUFDQXdCLE9BQU9DLE9BQVAsQ0FBZUwsY0FBZixHQUFnQ0EsY0FBaEMiLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbmNvbnN0IFZ1ZSA9IHJlcXVpcmUoJ3Z1ZScpO1xuXG5jb25zdCBidXR0ZXJudXQgPSByZXF1aXJlKCdidXR0ZXJudXQnKTtcbmNvbnN0IGJ1dHR0ZXJOdXRPcHRpb25zID0ge1xuICAgIHNvdXJjZU1hcDogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUFwcChzY3JpcHQpIHtcbiAgICByZXR1cm4gbmV3IFZ1ZShzY3JpcHQpO1xufVxuXG5mdW5jdGlvbiBsYXlvdXRVdGlsKGNvbXBvbmVudDogT2JqZWN0KSB7XG4gICAgbGV0IGxheW91dCA9IHt9O1xuICAgIGxheW91dC5zdHlsZSA9ICcnO1xuICAgIGxheW91dC5zY3JpcHQgPSBjb21wb25lbnQuc2NyaXB0O1xuICAgIGlmIChjb21wb25lbnQuc3R5bGUubGVuZ3RoID4gMCkge1xuICAgICAgICBsYXlvdXQuc3R5bGUgKz0gY29tcG9uZW50LnN0eWxlO1xuICAgIH1cbiAgICByZXR1cm4gbGF5b3V0O1xufVxuXG5cbmZ1bmN0aW9uIHJlbmRlcmVkU2NyaXB0KHNjcmlwdDogT2JqZWN0LCByb3V0ZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IHJvdXRlclN0cmluZyA9IHJvdXRlciAhPT0gdW5kZWZpbmVkID8gYGNvbnN0IF9fcm91dGVyID0gbmV3IFZ1ZVJvdXRlcigke1V0aWxzLnNjcmlwdFRvU3RyaW5nKHJvdXRlcil9KTtgIDogJyc7XG4gICAgbGV0IHNjcmlwdFN0cmluZyA9IFV0aWxzLnNjcmlwdFRvU3RyaW5nKHNjcmlwdCk7XG4gICAgbGV0IGRlYnVnVG9vbHNTdHJpbmcgPSAnJztcblxuICAgIGlmIChyb3V0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzY3JpcHRTdHJpbmcgPSBzY3JpcHRTdHJpbmcuc3Vic3RyKDAsIDEpICsgJ3JvdXRlcjogX19yb3V0ZXIsJyArIHNjcmlwdFN0cmluZy5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5WVUVfREVWKSB7XG4gICAgICAgIGRlYnVnVG9vbHNTdHJpbmcgPSAnVnVlLmNvbmZpZy5kZXZ0b29scyA9IHRydWU7JztcbiAgICB9XG4gICAgY29uc3QgamF2YVNjcmlwdFN0cmluZyA9IGAoZnVuY3Rpb24gKCkgeyd1c2Ugc3RyaWN0Jzske3JvdXRlclN0cmluZ312YXIgY3JlYXRlQXBwID0gZnVuY3Rpb24gKCkge3JldHVybiBuZXcgVnVlKCR7c2NyaXB0U3RyaW5nfSl9O2lmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge21vZHVsZS5leHBvcnRzID0gY3JlYXRlQXBwfSBlbHNlIHt0aGlzLmFwcCA9IGNyZWF0ZUFwcCgpfX0pLmNhbGwodGhpcyk7JHtkZWJ1Z1Rvb2xzU3RyaW5nfWFwcC4kbW91bnQoJyNhcHAnKTtgO1xuICAgIGNvbnN0IGZpbmFsU3RyaW5nID0gYnV0dGVybnV0LnNxdWFzaChqYXZhU2NyaXB0U3RyaW5nLCBidXR0dGVyTnV0T3B0aW9ucykuY29kZTtcblxuICAgIHJldHVybiBgPHNjcmlwdD4ke2ZpbmFsU3RyaW5nfTwvc2NyaXB0PmA7XG59XG5cbnR5cGUgaHRtbFV0aWxUeXBlID0ge1xuICAgIGFwcDogT2JqZWN0LFxuICAgIHNjcmlwdFN0cmluZzogc3RyaW5nLFxuICAgIGxheW91dDogT2JqZWN0LFxuICAgIHNjcmlwdFN0cmluZ1Jhdzogc3RyaW5nXG59O1xuXG5mdW5jdGlvbiByZW5kZXJIdG1sVXRpbChjb21wb25lbnQ6IE9iamVjdCk6IGh0bWxVdGlsVHlwZSB7XG4gICAgY29uc3QgbGF5b3V0ID0gbGF5b3V0VXRpbChjb21wb25lbnQpO1xuICAgIGNvbnN0IHJlbmRlcmVkU2NyaXB0U3RyaW5nID0gcmVuZGVyZWRTY3JpcHQobGF5b3V0LnNjcmlwdCk7XG4gICAgY29uc3QgYXBwID0gY3JlYXRlQXBwKGxheW91dC5zY3JpcHQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXBwOiBhcHAsXG4gICAgICAgIHNjcmlwdFN0cmluZzogcmVuZGVyZWRTY3JpcHRTdHJpbmcsXG4gICAgICAgIGxheW91dDogbGF5b3V0LFxuICAgICAgICBzY3JpcHRTdHJpbmdSYXc6IFV0aWxzLnNjcmlwdFRvU3RyaW5nKGxheW91dC5zY3JpcHQpXG4gICAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMubGF5b3V0VXRpbCA9IGxheW91dFV0aWw7XG5tb2R1bGUuZXhwb3J0cy5yZW5kZXJIdG1sVXRpbCA9IHJlbmRlckh0bWxVdGlsO1xuIl19