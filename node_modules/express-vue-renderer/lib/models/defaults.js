'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var path = require('path');
var deepmerge = require('deepmerge');
var Layout = require('./layout');

function concatMerge(destinationArray, sourceArray) {
    var finalArray = destinationArray.concat(sourceArray);
    //Dedupes dupes... obviously... but theres a problem here
    // return dedupe(finalArray);
    return finalArray;
}

var Defaults = function () {
    function Defaults() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Defaults);

        this.options = options;
        this.layout = new Layout.Layout(options.layout);

        if (options.style) {
            this.style = options.style;
        }

        if (options.rootPath) {
            this.rootPath = path.resolve(options.rootPath);
        }
        if (options.component) {
            this.component = options.component;
        }

        if (options.vue) {
            this.vue = options.vue;
        } else {
            this.vue = {};
        }
        if (options.data) {
            this.data = options.data;
        } else {
            this.data = {};
        }
    }

    _createClass(Defaults, null, [{
        key: 'mergeObjects',
        value: function mergeObjects(globalObject, newObject) {
            var mergedObject = deepmerge(globalObject, newObject, { arrayMerge: concatMerge });
            return mergedObject;
        }
    }]);

    return Defaults;
}();

module.exports = Defaults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbHMvZGVmYXVsdHMuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJkZWVwbWVyZ2UiLCJMYXlvdXQiLCJjb25jYXRNZXJnZSIsImRlc3RpbmF0aW9uQXJyYXkiLCJzb3VyY2VBcnJheSIsImZpbmFsQXJyYXkiLCJjb25jYXQiLCJEZWZhdWx0cyIsIm9wdGlvbnMiLCJsYXlvdXQiLCJzdHlsZSIsInJvb3RQYXRoIiwicmVzb2x2ZSIsImNvbXBvbmVudCIsInZ1ZSIsImRhdGEiLCJnbG9iYWxPYmplY3QiLCJuZXdPYmplY3QiLCJtZXJnZWRPYmplY3QiLCJhcnJheU1lcmdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBTUEsT0FBT0MsUUFBUSxNQUFSLENBQWI7QUFDQSxJQUFNQyxZQUFZRCxRQUFRLFdBQVIsQ0FBbEI7QUFDQSxJQUFNRSxTQUFTRixRQUFRLFVBQVIsQ0FBZjs7QUFFQSxTQUFTRyxXQUFULENBQXFCQyxnQkFBckIsRUFBdUNDLFdBQXZDLEVBQW9EO0FBQ2hELFFBQUlDLGFBQWFGLGlCQUFpQkcsTUFBakIsQ0FBd0JGLFdBQXhCLENBQWpCO0FBQ0E7QUFDQTtBQUNBLFdBQU9DLFVBQVA7QUFDSDs7SUFFS0UsUTtBQVFGLHdCQUFrQztBQUFBLFlBQXRCQyxPQUFzQix1RUFBSixFQUFJOztBQUFBOztBQUM5QixhQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDQSxhQUFLQyxNQUFMLEdBQWMsSUFBSVIsT0FBT0EsTUFBWCxDQUFrQk8sUUFBUUMsTUFBMUIsQ0FBZDs7QUFFQSxZQUFJRCxRQUFRRSxLQUFaLEVBQW1CO0FBQ2YsaUJBQUtBLEtBQUwsR0FBYUYsUUFBUUUsS0FBckI7QUFDSDs7QUFFRCxZQUFJRixRQUFRRyxRQUFaLEVBQXNCO0FBQ2xCLGlCQUFLQSxRQUFMLEdBQWdCYixLQUFLYyxPQUFMLENBQWFKLFFBQVFHLFFBQXJCLENBQWhCO0FBQ0g7QUFDRCxZQUFJSCxRQUFRSyxTQUFaLEVBQXVCO0FBQ25CLGlCQUFLQSxTQUFMLEdBQWlCTCxRQUFRSyxTQUF6QjtBQUNIOztBQUVELFlBQUlMLFFBQVFNLEdBQVosRUFBaUI7QUFDYixpQkFBS0EsR0FBTCxHQUFXTixRQUFRTSxHQUFuQjtBQUNILFNBRkQsTUFFTztBQUNILGlCQUFLQSxHQUFMLEdBQVcsRUFBWDtBQUNIO0FBQ0QsWUFBSU4sUUFBUU8sSUFBWixFQUFrQjtBQUNkLGlCQUFLQSxJQUFMLEdBQVlQLFFBQVFPLElBQXBCO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsaUJBQUtBLElBQUwsR0FBWSxFQUFaO0FBQ0g7QUFDSjs7OztxQ0FDbUJDLFksRUFBc0JDLFMsRUFBMkI7QUFDakUsZ0JBQU1DLGVBQWVsQixVQUFVZ0IsWUFBVixFQUF3QkMsU0FBeEIsRUFBbUMsRUFBRUUsWUFBWWpCLFdBQWQsRUFBbkMsQ0FBckI7QUFDQSxtQkFBT2dCLFlBQVA7QUFDSDs7Ozs7O0FBR0xFLE9BQU9DLE9BQVAsR0FBaUJkLFFBQWpCIiwiZmlsZSI6ImRlZmF1bHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBkZWVwbWVyZ2UgPSByZXF1aXJlKCdkZWVwbWVyZ2UnKTtcbmNvbnN0IExheW91dCA9IHJlcXVpcmUoJy4vbGF5b3V0Jyk7XG5cbmZ1bmN0aW9uIGNvbmNhdE1lcmdlKGRlc3RpbmF0aW9uQXJyYXksIHNvdXJjZUFycmF5KSB7XG4gICAgbGV0IGZpbmFsQXJyYXkgPSBkZXN0aW5hdGlvbkFycmF5LmNvbmNhdChzb3VyY2VBcnJheSk7XG4gICAgLy9EZWR1cGVzIGR1cGVzLi4uIG9idmlvdXNseS4uLiBidXQgdGhlcmVzIGEgcHJvYmxlbSBoZXJlXG4gICAgLy8gcmV0dXJuIGRlZHVwZShmaW5hbEFycmF5KTtcbiAgICByZXR1cm4gZmluYWxBcnJheTtcbn1cblxuY2xhc3MgRGVmYXVsdHMge1xuICAgIHJvb3RQYXRoOiBzdHJpbmc7XG4gICAgY29tcG9uZW50OiBzdHJpbmc7XG4gICAgbGF5b3V0OiBMYXlvdXQuTGF5b3V0O1xuICAgIG9wdGlvbnM6IE9iamVjdDtcbiAgICB2dWU6IE9iamVjdDtcbiAgICBkYXRhOiBPYmplY3Q7XG4gICAgc3R5bGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBPYmplY3QgPSB7fSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmxheW91dCA9IG5ldyBMYXlvdXQuTGF5b3V0KG9wdGlvbnMubGF5b3V0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zdHlsZSkge1xuICAgICAgICAgICAgdGhpcy5zdHlsZSA9IG9wdGlvbnMuc3R5bGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5yb290UGF0aCkge1xuICAgICAgICAgICAgdGhpcy5yb290UGF0aCA9IHBhdGgucmVzb2x2ZShvcHRpb25zLnJvb3RQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5jb21wb25lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50ID0gb3B0aW9ucy5jb21wb25lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy52dWUpIHtcbiAgICAgICAgICAgIHRoaXMudnVlID0gb3B0aW9ucy52dWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZ1ZSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IG9wdGlvbnMuZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBtZXJnZU9iamVjdHMoZ2xvYmFsT2JqZWN0OiBPYmplY3QsIG5ld09iamVjdDogT2JqZWN0KTogT2JqZWN0IHtcbiAgICAgICAgY29uc3QgbWVyZ2VkT2JqZWN0ID0gZGVlcG1lcmdlKGdsb2JhbE9iamVjdCwgbmV3T2JqZWN0LCB7IGFycmF5TWVyZ2U6IGNvbmNhdE1lcmdlIH0pO1xuICAgICAgICByZXR1cm4gbWVyZ2VkT2JqZWN0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0cztcbiJdfQ==